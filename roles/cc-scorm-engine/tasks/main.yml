---
    - name: Install context.xml
      template:
        src=context.xml.j2
        dest="{{ tomcat_base }}/conf/context.xml"

    # Pulls the ccupdated value from the content-controller role
    # If we have updated the zip file, we need to blow away the app
    - name: Remove ScormEngineInterface webapp
      file: path="{{ tomcat_base }}/webapps/ScormEngineInterface" state=absent

    - name: Creates ScormEngineInterface directory
      file: path={{ tomcat_base }}/webapps/ScormEngineInterface state=directory mode=0750 owner=tomcat group=tomcat

    - name: Explode ScormEngineInterface.war
      unarchive: src="{{ temp_path }}/engine/ScormEngineInterface.war" dest={{ tomcat_base }}/webapps/ScormEngineInterface force=yes copy=no owner=tomcat group=tomcat
      when: scorm_engine_war_name

    - name: Explode RusticiEngine.war
      unarchive: src="{{ temp_path }}/engine/RusticiEngine.war" dest={{ tomcat_base }}/webapps/ScormEngineInterface force=yes copy=no owner=tomcat group=tomcat
      when: rustici_engine_war_name

    - name: Remove map files
      shell: rm -f {{ tomcat_base }}/webapps/ScormEngineInterface/defaultui/player/js/*.map


    - name: Install {{war_name}}EngineSettings.properties file
      template: src="SCORMEngineSettings.properties.j2" dest="{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/classes/SCORMEngineSettings.properties"
      notify:
      - restart tomcat7
      - restart httpd
      when: scorm_engine_war_name

    - name: Install {{war_name}}EngineSettings.properties file
      template: src="RusticiEngineSettings.properties.j2" dest="{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/classes/RusticiEngineSettings.properties"
      notify:
      - restart tomcat7
      - restart httpd
      when: rustici_engine_war_name

    - name: Install web.xml file
      template: src=web.xml.j2 dest="{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/web.xml"
      notify:
      - restart tomcat7
      - restart httpd

    - name: Create EngineInstall.xml
      template:
        src=EngineInstall.xml.j2
        dest="{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/EngineInstall.xml"
      when: initialize_mysql
      notify:
      - restart tomcat7
      - restart httpd

    - name: Create logback.xml as used by the upgrade tool
      template:
        src=logback.upgrade.xml.j2
        dest="{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/logback.xml"
      when: initialize_mysql
      notify:
      - restart tomcat7
      - restart httpd

    - name: Create logback.xml used by Engine proper
      template:
        src=logback.engine.xml.j2
        dest="{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/classes/logback.xml"
      when: initialize_mysql
      notify:
      - restart tomcat7
      - restart httpd

    - name: Determine if ScormEngineDB is already installed
      command: mysql -u {{ mysql_root_user }} -p{{ mysql_root_password }} -h {{ cc_db_host }} --batch --skip-column-names --execute "SELECT COUNT(*) > 0 AS installed FROM information_schema.tables WHERE table_schema = 'ScormEngineDB' AND table_name = 'ScormPackage';"
      register: dbinstalled

    - name: Install Engine Database Tables (when appropriate)
      command: "java -cp '{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/lib/*' -Dlogback.configurationFile='{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/logback.xml' RusticiSoftware.ScormContentPlayer.Logic.Upgrade.ConsoleApp {{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/EngineInstall.xml -install"
      when: initialize_mysql and dbinstalled.stdout == "0"
      notify:
      - restart tomcat7
      - restart httpd

    - name: Upgrade Engine Database Tables (when appropriate)
      command: "java -cp '{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/lib/*' -Dlogback.configurationFile='{{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/logback.xml' RusticiSoftware.ScormContentPlayer.Logic.Upgrade.ConsoleApp {{ tomcat_base }}/webapps/ScormEngineInterface/WEB-INF/EngineInstall.xml"
      when: engine_upgrade is defined and engine_upgrade
      notify:
      - restart tomcat7
      - restart httpd

    - name: Engine DB repeatable migrations
      copy:
        src: "{{ item }}"
        dest: /tmp
      with_items:
        - R__function_content_controller_connection_validation.sql
        - R__fix_scorm_activity_records.sql
        - R__update_outdated_settings.sql
      when: cc_run_db_migrations

    - name: Run Engine DB repeatable migrations
      mysql_db:
        login_host: "{{ cc_db_host }}"
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"
        name: "{{ engine_db_name }}"
        state: import
        target: "/tmp/{{ item }}"
      with_items:
        - R__function_content_controller_connection_validation.sql
        - R__fix_scorm_activity_records.sql
        - R__update_outdated_settings.sql
      when: cc_run_db_migrations

    - name: Clean up default webapps
      command: "rm -rf {{ tomcat_base }}/webapps/{docs,examples,ROOT}"
      notify:
      - restart tomcat7
      - restart httpd

    - name: link scormengine.log into /var/log for convenience
      file: src="{{ tomcat_base }}/logs/scormengine.log" dest="/var/log/scormengine.log" state=link force=yes

    - name: install logrotate config
      template:
        src: scormengine.logrotate.j2
        dest: /etc/logrotate.d/scormengine
        owner: root
        group: root
        mode: 0644

    # CC-2047
    - name: Modify dispatch.client.loader.js
      lineinfile:
        path: "{{ tomcat_base }}/webapps/ScormEngineInterface/dispatch/dispatch.client.loader.js"
        line: "document.body.onload = function () {DispatchStart(); var initializeStatus = function () {if (objLMS) {if (objLMS.GetStatus() === LESSON_STATUS_NOT_ATTEMPTED) {objLMS.ResetStatus();}} else {setTimeout(initializeStatus, 100);}}; initializeStatus();};"

    - name: Modify dispatch-server-min.js
      replace:
        path: "{{ tomcat_base }}/webapps/ScormEngineInterface/defaultui/player/js/dispatch-server-min.js"
        regexp: "DispatchDriver\\.showContent\\(\\);"
        replace: 'DispatchDriver.sendPipeMessageToLMS = function(e){try{if(null!==this.pipe&&this.pipe.location.href,"tincan"!==DISPATCH_SERVER_CFG.sourceStandard&&"undefined"!=typeof rscpCfg&&"new window"===rscpCfg.get("registrationToDeliver").Package.Properties.PlayerLaunchType)try{window.opener.parent.parent.location.href,this.pipe=window.opener.parent.parent.parent}catch(t){this.pipe=window.opener.parent.parent}else try{window.parent.parent.location.href,this.pipe=window.parent.parent.parent}catch(t){this.pipe=window.parent.parent}}catch(n){}e.rusticiSoftwareDispatch=!0,e.sequenceNumber=this.sequenceNumber,this.sequenceNumber+=1;try{this.pipe.postMessage(JSON.stringify(e),DISPATCH_SERVER_CFG.pipeDomain)}catch(n){alert("The communication link for dispatch has been broken, this may result in a loss of data. (postMessage returned exception: "+n+")")}};DispatchDriver.showContent();'

    - name: Modify Closer.html
      replace:
        path: "{{ tomcat_base }}/webapps/ScormEngineInterface/dispatch/Closer.html"
        regexp: "window\\.parent\\.parent\\.postMessage\\("
        replace: |
          var pipe = window;
          try {
              window.parent.parent.location.href;
              if (!window.parent.parent.changing_languages) {
                  pipe = window.parent.parent.parent;
              }
          } catch (ex) {
              if (!window.parent.changing_languages) {
                  pipe = window.parent.parent;
              }
          }
          pipe.postMessage(