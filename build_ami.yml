# This playbook:
#  - Creates a new SSH key pair locally for the ansible user on the app servers (if one does not exist)
#  - Starts a new EC2 instance
#  - Installs the SSH public key for the ansible user on the EC2 instance (and creates the ansible user)
#  - Installs Content Controller on the new EC2 instance
#  - Runs database migrations (can be skipped by adding `-e '{"cc_run_db_migrations": false}'`)
#  - Creates an AMI of the new EC2 instance and then shuts it down
#
# Requirements:
#  - Must be run on a Linux EC2 instance with an attached IAM role (with EC2 permissions)
#    or boto must be configured with AWS credentials
#  - All `group_vars` should be configured (including `aws.yml`)
#
# Example Usage:
#  ansible-playbook -e "env=prod" build_ami.yml

- hosts: localhost
  gather_facts: false
  vars_files:
    - group_vars/aws.yml
  tasks:
    - name: Generate Ansible SSH key pair
      command: ssh-keygen -b 2048 -t rsa -f ~/.ssh/ansible -q -N ""
      args:
        creates: ~/.ssh/ansible.pub

    - name: Read SSH public key
      command: cat ~/.ssh/ansible.pub
      register: ssh_public_key_output

    - name: Launch temporary EC2 instance
      ec2:
        assign_public_ip: no
        region: "{{ aws_region }}"
        key_name: "{{ ssh_key }}"
        group_id: "{{ ami_build_security_group_id }}"
        instance_type: "{{ instance_size }}"
        vpc_subnet_id: "{{ ami_build_vpc_subnet_id }}"
        image: "{{ webami }}"
        wait: yes
        wait_timeout: 500
        exact_count: 1
        count_tag:
          role: ami_builder
        instance_tags:
          Name: "Rustici CC AMI Builder"
          role: ami_builder
          environment: "{{ env }}"
        user_data: |
          #cloud-config
          users:
            - default
            - name: ansible
              lock_passwd: true
              groups: [adm, audio, cdrom, dailout, dip, floppy, lxd, netdev, plugdev, sudo, video]
              sudo: ["ALL=(ALL) NOPASSWD:ALL"]
              shell: /bin/bash
              ssh-authorized-keys:
                - "{{ ssh_public_key_output.stdout }}"
      register: ami_instance

    - name: Wait for SSH to become available
      wait_for:
        port: 22
        host: "{{ ami_instance.tagged_instances.0.private_ip }}"
        timeout: 300
        search_regex: OpenSSH

    - name: Add host to group
      add_host:
        name: "Rustici CC AMI Builder"
        ansible_host: "{{ ami_instance.tagged_instances.0.private_ip }}"
        ansible_user: ansible
        ansible_ssh_private_key_file: ~/.ssh/ansible
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        ansible_python_interpreter: /usr/bin/python3
        groups: just_created

- hosts: just_created
  become: true
  force_handlers: true
  gather_facts: false
  vars:
    building_ami: true
  pre_tasks:
    - name: Wait before running apt update
      pause:
        seconds: 30
    # Install Ansible dependencies (most Ubuntu 18.04 images don't ship with these by default)
    - name: Install Ansible dependencies, if necessary
      raw: if [ -e /usr/bin/apt ]; then (apt -y update && export DEBIAN_FRONTEND=noninteractive && apt install -y python3 aptitude); fi; if [ -e /usr/bin/yum ]; then (yum -y update && yum -y install python3); fi;

    # Force gather_facts to run, now that python is installed
    - setup:
  vars_files:
    - [ "group_vars/{{ env }}.yml", "group_vars/env.yml" ]
    - group_vars/engine_java.yml
    - group_vars/content_controller.yml
    - group_vars/s3.yml
    - group_vars/cloudfront.yml
    - group_vars/keypair.yml
  roles:
    - common
    - java
    - ssl
    - tomcat
    - mnt
    - { role: mysql-local, when: cc_db_host == "localhost" }
    - { role: mysql-config, when: initialize_mysql }
    - apache
    - content-controller
    - cc-scorm-engine
    - { role: cloudfront, when: use_cloudfront is defined and use_cloudfront|bool == True }
    - { role: newrelic, when: newrelic_license_key is defined }
    - { role: saml, when: enable_saml is defined and enable_saml|bool == True }

- hosts: localhost
  vars_files:
    - [ "group_vars/{{ env }}.yml", "group_vars/env.yml" ]
    - group_vars/aws.yml
  tasks:
    - name: Read build name
      set_fact:
        build_name: "{{ hostvars['Rustici CC AMI Builder']['build_name'] }}"

    - name: Bundle AMI
      ec2_ami:
        instance_id: "{{ ami_instance.tagged_instances.0.id }}"
        region: "{{ aws_region }}"
        state: present
        description: This was provisioned by Build AMI on {{ ansible_date_time.iso8601 }}
        name: "{{ build_name }}_{{ env }}_{{ ansible_date_time.epoch }}"
        tags:
          Name: "{{ build_name }}-{{ ServerName }}"
          environment: "{{ env }}"
          domain: "{{ ServerName }}"
          build_name: "{{ build_name }}"
          created_by: "Rustici CC AMI Builder"
        wait: yes
      register: amioutput

    - name: Terminate temporary instance
      ec2:
        state: absent
        region: "{{ aws_region }}"
        instance_ids: "{{ ami_instance.tagged_instances.0.id }}"
