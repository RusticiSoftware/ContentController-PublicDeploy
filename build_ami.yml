- hosts: localhost
  gather_facts: False
  vars_files:
  - group_vars/aws.yml
  tasks:
  - name: launch temporary instance
    ec2:
      assign_public_ip: no
      region: "{{ aws_region }}"
      key_name: "{{ ssh_key }}"
      group_id: "{{ ami_build_security_group_id }}"
      instance_type: "{{ instance_size }}"
      vpc_subnet_id: "{{ ami_build_vpc_subnet_id }}"
      image: "{{ webami }}"
      wait: yes
      wait_timeout: 500
      exact_count: 1
      count_tag:
         role: ami_builder
      instance_tags:
         Name: "Ansible AMI Builder"
         role: ami_builder
         environment: "{{ env }}"
    register: ami_instance

  - name: waiting for ssh to start
    wait_for: port=22 host={{ ami_instance.tagged_instances.0.private_ip }} timeout=300
              search_regex=OpenSSH

  - name: add host to group
    add_host: name={{ ami_instance.tagged_instances.0.private_ip }} groups=just_created

- hosts: just_created
  sudo: yes
  force_handlers: True
  roles:
    - common
    # - { role: qa-dev, when: ansible_distribution == 'Ubuntu' }
    - java
    - tomcat
    - ssl
    - mnt
    - { role: mysql-local, when: cc_db_host == "localhost" }
    - { role: mysql-config, when: initialize_mysql }
    - apache
    - content-controller
    - cc-scorm-engine
    - { role: cloudfront, when: use_cloudfront is defined and use_cloudfront|bool == True }
    - monit
    - { role: logstash-filebeat, when: (filebeat is defined and filebeat|bool == true) and ansible_distribution == 'Ubuntu' }
    - { role: newrelic, when: newrelic_license_key is defined and ansible_distribution == 'Ubuntu' }

- hosts: localhost
  vars_files:
    - group_vars/aws.yml

  tasks:

  - name: bundle ami

    action:
      module: ec2_ami
      instance_id: "{{ ami_instance.tagged_instances.0.id }}"
      region: "{{ aws_region }}"
      state: present
      description: This was provisioned {{ ansible_date_time.iso8601 }}
      name: "CC_{{ env }}_{{ ansible_date_time.epoch }}"
      wait: yes
    register: amioutput

  - name: terminate temporary instance
    action:
      module: ec2
      state: absent
      region: "{{ aws_region }}"
      instance_ids: "{{ ami_instance.tagged_instances.0.id }}"

  - name: create vars file with  new ami info
    copy:
      content: |
             image_id: {{ amioutput.image_id }}
             lc_suffix: {{ ansible_date_time.epoch }}
      dest: host_vars/{{ ServerName }}_{{ env }}_settings.yml
    when: deploy is defined and deploy|bool == True

  - name: Fetch current AMI name from consul
    consul_kv:
      key: "{{ ServerName }}/ami/current"
      cas: 0
    when: (deploy is defined and deploy|bool == True) and (terraform is defined and terraform|bool == true) and (consul is defined and consul|bool == true)
    register: oldami

  - name: Copy current AMI name to consul's last value
    consul_kv:
      key: "{{ ServerName }}/ami/last"
      state: present
      value: "{{ oldami.data.Value }}"
    when: (deploy is defined and deploy|bool == True) and (terraform is defined and terraform|bool == true) and (consul is defined and consul|bool == true)

  - name: update Consul with new AMI
    consul_kv:
      key: "{{ ServerName }}/ami/current"
      value: "{{ amioutput.image_id }}"
      state: present
    when: (deploy is defined and deploy|bool == True) and (terraform is defined and terraform|bool == true) and (consul is defined and consul|bool == true)
